name: Backend CI/CD

on:
  push:
    branches: [ "dev", "staging", "master" ]
  pull_request:
    branches: [ "dev", "staging", "master" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.vars.outputs.TAG }}
      port: ${{ steps.vars.outputs.PORT }}
      container_name: ${{ steps.vars.outputs.CONTAINER_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set environment variables
        id: vars
        run: |
          if [[ "${GITHUB_REF_NAME}" == "dev" ]]; then
            echo "TAG=dev" >> $GITHUB_OUTPUT
            echo "PORT=8080" >> $GITHUB_OUTPUT
            echo "CONTAINER_NAME=backend-api-dev" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF_NAME}" == "staging" ]]; then
            echo "TAG=staging" >> $GITHUB_OUTPUT
            echo "PORT=4000" >> $GITHUB_OUTPUT
            echo "CONTAINER_NAME=backend-api-staging" >> $GITHUB_OUTPUT
          else
            echo "TAG=latest" >> $GITHUB_OUTPUT
            echo "PORT=80" >> $GITHUB_OUTPUT
            echo "CONTAINER_NAME=backend-api-prod" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend-api:${{ steps.vars.outputs.TAG }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/backend-api:${{ steps.vars.outputs.TAG }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref_name == 'dev' || github.ref_name == 'staging' || github.ref_name == 'master')
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Pull da nova imagem
            docker pull ${{ secrets.DOCKER_USERNAME }}/backend-api:${{ needs.build-and-push.outputs.tag }}
            
            # Para e remove o container específico do ambiente
            docker stop ${{ needs.build-and-push.outputs.container_name }} || true
            docker rm ${{ needs.build-and-push.outputs.container_name }} || true
            
            # Remove imagens antigas para economizar espaço
            docker image prune -f
            
            # Executa o novo container
            docker run -d \
              --name ${{ needs.build-and-push.outputs.container_name }} \
              -p ${{ needs.build-and-push.outputs.port }}:3001 \
              --restart unless-stopped \
              ${{ secrets.DOCKER_USERNAME }}/backend-api:${{ needs.build-and-push.outputs.tag }}
            
            # Aguarda alguns segundos para o container inicializar
            sleep 10
            
            # Verifica se o container está rodando
            if docker ps | grep -q ${{ needs.build-and-push.outputs.container_name }}; then
              echo "✅ Container ${{ needs.build-and-push.outputs.container_name }} está rodando"
              docker logs --tail 20 ${{ needs.build-and-push.outputs.container_name }}
            else
              echo "❌ Falha ao iniciar o container"
              docker logs ${{ needs.build-and-push.outputs.container_name }}
              exit 1
            fi
